// React Components
import React, { useLayoutEffect } from "react";
import { useEffect } from "react";

// Next imports
import Head from "next/head";
import dynamic from "next/dynamic";

// IconLabel component

// Using the dynamic method to prevent the 'Prop `id` did not match' error from happening
const IconLabel = dynamic(()=>import("./components/IconLabel"),{ssr:false})

// Font Awesome
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faEnvelope,
  faSchool,
  faBoltLightning,
  faClock,
  faCalendar,
} from "@fortawesome/free-solid-svg-icons";

// Sweetalert
import Swal from "sweetalert2";

// moment
import moment from "moment";

// Mui
import Box from "@mui/material/Box";
import {
  FormControlLabel,
  FormGroup,
  FilledInput,
  FormControl,
  InputLabel,
  Checkbox,
} from "@mui/material";

export default function UserProfile(): JSX.Element {
  
  // Profile object
  const [profile, setProfile] = React.useState<any>("");

  // Gets the height of the whole window
  const windowHeight = useWindowHeight();

  // Specifically used for the 'Super Power' input
  const [superPowerInputFocused, setSuperPowerInputFocused] =
    React.useState<boolean>(false);

  useEffect(() => {
    fetch("/api/profile")
      .then((res: any) => res.json())
      .then((profile: any) => {
        setProfile(profile);
      })
      .catch((err) => {
        // Sweetalert dialog fires when the profile fails to load
        Swal.fire({
          title: "Unable to retrieve profile info ðŸ˜¢",
          text: "Sorry, we were unable to retrieve the profile info. Try again later ðŸ™‚",
          icon: "error",
          confirmButtonColor: "#f44336",
        });
      });
  }, []);

  return (
    <Box
      sx={{
        background: "#424448",
        padding: "125px 15vw 125px 15vw",

        /* 
        
        Window has to be greater than 650px to make the height 100%
        because the min height of the card is 450px
        and it's vertical padding is 125px + 125px = 250px
        So in total: 450px + 250px = 700px
        
        */

        // To prevent additional whitespace after zooming in / making the window smaller
        height: (windowHeight!=null && windowHeight>700) ? "100%" : "auto",
        display: "flex",
        flexDirection: "column",
      }}
    >
      <Head>
        <title>{profile.displayName} - Profile</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box
        sx={{
          background: "#ffffff",
          boxShadow: "0px 0px 8px rgba(0,0,0,0.5)",
          borderRadius: "5px",
          height: "100%",
          display: "flex",
          flexDirection: "column",
          minHeight:"450px",
          fontFamily:"Roboto",
          // minHeight:"300px"
        }}
      >
        {/* Card Header (header) */}
        <Box
          component="header"
          sx={{
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "center",
            background: "#F4F7F5",
            borderRadius: "5px 5px 0px 0px",
            padding: "30px 0px",
          }}
        >
          <Box
            component="img"
            sx={{
              borderRadius: "500px",
              width: "150px",
              height: "150px",
              marginTop: "-100px",
              boxShadow: "0px 5px 10px rgba(0, 0, 0, 0.334)",
            }}
            src={
              profile.photoUrl != null && profile.photoUrl.length > 0
                ? profile.photoUrl
                : "./profile_pic.png"
            }
            alt="Profile Photo"
          />
          {/* Name */}
          <Box component="h2" sx={{ margin: "10px 0px" }}>
            {profile.displayName}
          </Box>
          {/* Email */}
          <IconLabel value={profile.email} icon={faEnvelope}></IconLabel>
          {/* School */}
          <IconLabel
            value={profile.schoolName}
            icon={faSchool}
            verified={profile.schoolVerified}
          ></IconLabel>
          {/* Divider */}
          <Box
            component="hr"
            sx={{
              width: "50%",
              border: "0.1px solid #bbbbbb",
              background: "grey",
            }}
          ></Box>
          {/* Date Joined */}
          <IconLabel
            fontSize={13}
            title={"Date Joined"}
            value={new Date(profile.created).toLocaleString()}
            icon={faCalendar}
          ></IconLabel>
          {/* Last Active */}
          <IconLabel
            fontSize={13}
            title={"Last Active"}
            value={new Date(profile.created).toLocaleString()}
            icon={faClock}
          ></IconLabel>
        </Box>
        {/* Card body (main) */}
        <Box
          component="main"
          sx={{
            alignItems: "center",
            padding: "15px",
            overflowY: "auto",
            display: "flex",
            flexDirection: "column",
          }}
        >
          {/* 'Super Power' input */}
          <FormControl fullWidth>
            <InputLabel
              sx={{
                fontFamily: "inherit",
              }}
              shrink={
                profile.superPower != null &&
                (profile.superPower.length > 0 || superPowerInputFocused)
              }
              htmlFor="super-power"
            >
              <FontAwesomeIcon icon={faBoltLightning}></FontAwesomeIcon> Super
              Power
            </InputLabel>
            <FilledInput
              onFocus={(event: any) => setSuperPowerInputFocused(true)}
              onBlur={(event: any) => setSuperPowerInputFocused(false)}
              onChange={(event: any) =>
                setProfile({ ...profile, superPower: event.target.value })
              }
              value={profile.superPower}
              multiline={true}
              id={"super-power"}
              title={"Super Power"}
              maxRows={5}
            />
          </FormControl>
          {/* 'Share Statistics' input */}
          <FormControl fullWidth>
            <FormGroup>
              <FormControlLabel
                control={
                  <Checkbox
                    onChange={(event) =>
                      setProfile({
                        ...profile,
                        shareStatistics: event.target.checked,
                      })
                    }
                    checked={
                      profile.shareStatistics != null
                        ? profile.shareStatistics
                        : false
                    }
                    inputProps={{ "aria-label": "controlled" }}
                  />
                }
                label={<Box>Share Statistics</Box>}
              />
            </FormGroup>
          </FormControl>
        </Box>
      </Box>
    </Box>
  );
}

// Referred to https://stackoverflow.com/questions/60853629/nextjs-passing-dynamic-width-on-resize-not-re-rendering
function useWindowHeight() {
  const [height,setHeight] = React.useState<number>(700);

  const handleResize = () => setHeight(window.innerHeight);
  useEffect(()=>{
    // Trying out the 'splitting' method
    "load resize".split(" ").forEach(function(e: any) {
      window.addEventListener(e,handleResize);
    });
    return ()=>"load resize".split(" ").forEach(function(e: any) {
      window.removeEventListener(e,handleResize);
    });
  },[handleResize]);
  return height;
}